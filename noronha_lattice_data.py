import numpy as np
import pickle

p_bounds = np.array([[45.0, 261.0], [45.0, 11.0], [404.0, 11.0], [404.0, 261.0]], dtype=float)
p_axes = np.array([[100,0],[100,4],[420,4],[420,0]],dtype=float)

pT4_T_mu0 = [[73.0, 242.0], [78.5, 238.0], [84.0, 236.0], [90.0, 232.0], [95.0, 229.0], [101.0, 224.0], [107.0, 219.0],
          [112.0, 213.0], [118.0, 207.0], [123.0, 201.0], [129.0, 194.0], [134.0, 187.0], [140.0, 180.0], [146.0,174.0],
          [157.0,160.0], [179.0, 137.0], [202.0, 117.0], [224.0, 101.0], [247.0, 87.0], [269.0, 76.0], [292.0, 66.0],
          [314.0, 58.0], [337.0, 51.0], [359.0, 45.0], [382.0, 40.5]]


pT4_T_mu400 = [[73, 233.5],[79, 229],[84.5,224.5],[89.5,218.5],[95.5,213],[101,205],[106.5,197],[112.5,189],[118,180.5],[123.5,172.5],
[129.5,164],[134.5,157],[140.5,149.5],[146,143.5],[157.5,130.5],[180.0,110.5],[202.0, 94],[224.5, 80],[247, 69.5],[269.5,60],
[292,52],[314.5,45],[337.0,39.5],[359.5,34.5],[382.0,30.5]]

I_bounds = np.array([[41.5,263.5],[41.5,12.5],[400.5,12.5],[400.5,263.5]], dtype=float)
I_axes = np.array([[100,0],[100,6],[420,6],[420,0]], dtype=float)

IT4_T0 = [[69,230],[75,222],[80.5,214],[86,201],[91.5,188.5],[97,167.5],[103,150.5],[108,134],[114,121.5],[119.5,113],
[125,104.5],[130.5,100.5],[136,96],[142,96],[153,96],[175.5,104.5],[198,122],[220.5,138],[243,146.5],[265.5,155],
[288,167.5],[310.5,175.5],[333,183.5],[355,192.5],[378,201]]

IT4_T400 = [[265,155],[288,162.5],[310,175.5],[333,184],[355,192.5],[378,201],[68.5,192],[74.5,175.5],[80.5,155],
[85.5,129.5],[91,108.5],[96.5,83],[102.5,62.5],[108,49.5],[114,46],[120,45.5],[125.5,46],[131,50],[136.5,54.5],
[142,58],[153,66.5],[175.5,91.5],[198,113.5],[220,134],[243,146.5],[265,155],[288,162.5],[310,175.5],[333,184],[355,192.5],
[378,201]
]

vsq_bounds = np.array([[54.5,251.5],[54.5, 13.5],[395.5, 13.5],[395.5, 251.5]], dtype=float)
vsq_axes = np.array([[100,0],[100,0.4],[405,0.4],[405,0]], dtype=float)

vsq_T0 = [[82.5,156],[88, 167.5],[94,167.5],[99.5,167.5],[105.5,174.5],[110.5,174],[116,174],[121.5,162], [127,156.5],
[133,150],[138,144],[144,137.5],[149,132],[155,126.5],[166,114.5],[188.5,102.5],[211,90.5],[233.5, 84.5],[255.5,    84.5],
[277.5, 78.5],[300.5,72.5],[322.5,72.5],[344.5, 66],[367.5, 66],[390, 66]]

vsq_T400 = [[82.5,167],[88,179.5],[93.5,186],[99,186],[105,186],[110.5, 179.5],[115.5,179.5],[121,167.5],
[126.5, 156],[132.5,144],[138.5,137.5],[144, 132],[149.5,126.5],[155,120],[166,108],[188.5,102.5],[211,90.5],
[233,84.5],[255.5,84.5],[277.5,78.5],[300,78],[322.5,72.5],[345,66],[367.5,66],[389.5,66.5]]

def convert_to_TD_coords(pic_bounds, TD_bounds, data):
    x_range_pic = pic_bounds[2,0] - pic_bounds[1,0]
    y_range_pic = pic_bounds[1,1] - pic_bounds[0,1]

    x_range_TD = TD_bounds[2,0] - TD_bounds[1,0]
    y_range_TD = TD_bounds[1,1] - TD_bounds[0,1]

    print x_range_pic
    print x_range_TD

    print y_range_pic
    print y_range_TD

    data_TD = np.zeros_like(data)
    for k in range(0, len(data[:,0])):
        data_TD[k, 0] = TD_bounds[0,0] + (data[k,0] - pic_bounds[0,0])*x_range_TD/x_range_pic
        data_TD[k, 1] = TD_bounds[0,1] + (data[k,1] - pic_bounds[0,1])*y_range_TD/y_range_pic

    print data_TD
    return data_TD

lat_pT4_mu0 = convert_to_TD_coords(p_bounds, p_axes,np.array(pT4_T_mu0, dtype = float))
lat_pT4_mu400 = convert_to_TD_coords(p_bounds, p_axes,np.array(pT4_T_mu400, dtype = float))

lat_IT4_mu0 = convert_to_TD_coords(I_bounds, I_axes,np.array(IT4_T0, dtype = float))
lat_IT4_mu400 = convert_to_TD_coords(I_bounds, I_axes,np.array(IT4_T400, dtype = float))

lat_vsq_mu0 = convert_to_TD_coords(vsq_bounds, vsq_axes,np.array(vsq_T0, dtype = float))
lat_vsq_mu400 = convert_to_TD_coords(vsq_bounds, vsq_axes,np.array(vsq_T400, dtype = float))

no_lattice_data = {0:{'pT4':lat_pT4_mu0, 'IT4':lat_IT4_mu0, 'vsq':lat_vsq_mu0}, 400:{'pT4':lat_pT4_mu400, 'IT4':lat_IT4_mu400, 'vsq':lat_vsq_mu400}}

fname = 'no_lattice.p'
pickle.dump(no_lattice_data, open(fname, "wb"))
file.close(open(fname))
